import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, r2_score

# Step 1: Load the Dataset
train_data_path = r'C:\Users\DELL\Downloads\house-prices-advanced-regression-techniques\train.csv'
data = pd.read_csv(train_data_path)

# Step 2: Explore and Preprocess the Data
# For simplicity, we will use only the required columns: 'GrLivArea', 'BedroomAbvGr', 'FullBath', and 'SalePrice'
# Fill missing values in specific columns if necessary
data['GrLivArea'] = data['GrLivArea'].fillna(data['GrLivArea'].mean())
data['BedroomAbvGr'] = data['BedroomAbvGr'].fillna(data['BedroomAbvGr'].mean())
data['FullBath'] = data['FullBath'].fillna(data['FullBath'].mean())
data['SalePrice'] = data['SalePrice'].fillna(data['SalePrice'].mean())

# Separate features and target variable
features = data[['GrLivArea', 'BedroomAbvGr', 'FullBath']]
target = data['SalePrice']

# Step 3: Split the Data
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Step 4: Build and Train the Model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 5: Evaluate the Model
y_pred = model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Absolute Error: {mae}')
print(f'R-squared: {r2}')

# Example of making predictions with new data
new_data = pd.DataFrame({
    'GrLivArea': [2000, 1500],
    'BedroomAbvGr': [3, 2],
    'FullBath': [2, 1]
})

predictions = model.predict(new_data)
print('Predictions for new data:', predictions)
